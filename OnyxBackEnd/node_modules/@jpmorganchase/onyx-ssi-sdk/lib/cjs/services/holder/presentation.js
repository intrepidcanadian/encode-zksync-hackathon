"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCredentialsFromVP = exports.createAndSignPresentationJWT = exports.createPresentation = void 0;
const common_1 = require("../common");
/**
 * Creates a {@link PresentationPayload} from supplied Holder DID
 * and Verifiable Credentials
 *
 * The Verifiable Presentation object created follows the
 * [W3C Verifiable Presentation standards](https://www.w3.org/TR/vc-data-model/#presentations-0)
 * This Presentation object has not been signed.
 *
 * @param holderDid DID of the subject presenting the Verifiable Credentials
 * @param verifiableCredentials list of {@link VerifiableCredential}s to be included in the
 * Verifiable Presentation
 * @param additionalProperties other W3C spec compliant properties of a VP
 * @returns a `PresentationPayload` representing the W3C Verifiable Presentation object
 */
function createPresentation(holderDid, verifiableCredentials, additionalProperties) {
    let presentation = {};
    presentation["@context"] = [common_1.DEFAULT_CONTEXT];
    presentation.type = common_1.VERIFIABLE_PRESENTATION;
    presentation.holder = holderDid;
    presentation.verifiableCredential = verifiableCredentials;
    presentation = Object.assign(presentation, additionalProperties);
    return presentation;
}
exports.createPresentation = createPresentation;
/**
 * Creates a Verifiable Presentation JWT from {@link DIDWithKeys} and
 * {@link VerifiableCredential}
 *
 * This method first creates the Presentation object from the Holder keys and the supplied
 * Verifiable Credentials. This object becomes the payload that is transformed into the
 * [JWT encoding](https://www.w3.org/TR/vc-data-model/#jwt-encoding)
 * described in the [W3C VC spec](https://www.w3.org/TR/vc-data-model)
 *
 * `DIDWithKeys` is used to sign the JWT that encodes the Verifiable Presentation.
 *
 * @param holder DID and Keypair of the Holder (the Entity signing the Presentation)
 * @param verifiableCredentials list of {@link VerifiableCredential}s to be included in the
 * Verifiable Presentation
 * @param options Use these options to customize the creation of the JWT Credential
 * @returns a `Promise` that resolves to the Verifiable Presentation JWT
 */
function createAndSignPresentationJWT(holder, verifiableCredentials, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const payload = createPresentation(holder.did, verifiableCredentials);
        const jwtService = new common_1.JWTService();
        return yield jwtService.signVP(holder, payload, options);
    });
}
exports.createAndSignPresentationJWT = createAndSignPresentationJWT;
/**
 * Helper function to retrieve the Verifiable Credentials from a Verifiable Presentation
 *
 * @param vp the Verifiable Presentation
 * @returns the list of Verifiable Credentials included in the Presentation
 */
function getCredentialsFromVP(vp) {
    var _a;
    const jwtService = new common_1.JWTService();
    if (typeof vp === 'string') {
        const decoded = (_a = jwtService.decodeJWT(vp)) === null || _a === void 0 ? void 0 : _a.payload;
        return decoded.vp.verifiableCredential;
    }
    else {
        throw TypeError('Ony JWT supported for Verifiable Presentations');
    }
}
exports.getCredentialsFromVP = getCredentialsFromVP;
