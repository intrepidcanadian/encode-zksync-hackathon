"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SCHEMA_VALIDATOR = exports.SchemaManager = void 0;
const jsonschema_1 = require("jsonschema");
const errors_1 = require("../../../errors");
const HelperUtils_1 = require("../../../utils/HelperUtils");
class SchemaManager {
    /**
     * Reads in a [JSON schema](https://json-schema.org/specification-links.html#draft-7)
     * for a Verifiable Credential from a remote location
     *
     * Once retrieved from the remote location, the schema will be validated using `jsonschema`
     *
     * @param schemaLocation - the remote location of the schema file
     * @returns a `Promise` that resolves to a Verifiable Credential {@link JsonSchema} object.
     * Will throw `SchemaValidationFailureError` if the schema cannot be retrieved or if validation fails
     */
    static getSchemaRemote(schemaLocation) {
        return __awaiter(this, void 0, void 0, function* () {
            const schema = yield HelperUtils_1.HelperUtils.axiosHelper(schemaLocation);
            const validated = yield this.validateSchema(schema);
            if (!validated) {
                throw new errors_1.SchemaValidationFailureError('Retrieved Schema failed validation');
            }
            return schema;
        });
    }
    /**
     * Reads in a [JSON schema](https://json-schema.org/specification-links.html#draft-7)
     * for a Verifiable Credential from a local file location
     *
     * Once retrieved from the location, the schema will be validated using jsonschema
     *
     * @param schemaLocation - the file path of the schema file
     * @returns a `Promise` that resolves to a Verifiable Credential {@link JsonSchema} object.
     * Will throw an `SchemaValidationFailureError` if schema cannot be retrieved or if valiation fails
     */
    static getSchemaFromFile(schemaLocation) {
        return __awaiter(this, void 0, void 0, function* () {
            const schema = yield HelperUtils_1.HelperUtils.fileReaderJSON(schemaLocation);
            const validated = yield this.validateSchema(schema);
            if (!validated) {
                throw new errors_1.SchemaValidationFailureError('Retrieved Schema failed validation');
            }
            return schema;
        });
    }
    /**
     * Helper function used in validating the JSON schema
     *
     * Every {@link JsonSchema} defines a `$schema` property that defines the
     * spec for JSON based format used for defining the structure of JSON data
     * This method retrieves the spec to validate the schema against
     *
     * https://json-schema.org/specification-links.html contains the available drafts
     * Currently in this implementation we use [draft-07](http://json-schema.org/draft-07/schema#)
     *
     *
     * @param schema the {@link JsonSchema} containing the schema spec to retrieve
     * @returns a `Promise` resolving to {@link JSON}.
     * Will throw an Error if no schema property is defined, if the get request fails, or if parsing fails
     */
    static getSchemaSpec(schema) {
        return __awaiter(this, void 0, void 0, function* () {
            const schemaUrl = schema['$schema'];
            if (!schemaUrl) {
                throw new ReferenceError('$schema not found in provided json');
            }
            const spec = yield HelperUtils_1.HelperUtils.axiosHelper(schemaUrl);
            if (typeof spec === 'object') {
                return spec;
            }
            return HelperUtils_1.HelperUtils.parseJSON(spec);
        });
    }
    /**
     * Helper function to validate a JSON schema against its defined spec
     *
     * First the spec defined in the schema is fetched and `validate` from jsonschema is
     * used to do the schema validation
     *
     * @param schema The {@link JsonSchema} to be validated
     * @returns a `Promise` that resolves to if the validation succeeded, Error thrown if not
     */
    static validateSchema(schema) {
        return __awaiter(this, void 0, void 0, function* () {
            const schemaSpec = yield this.getSchemaSpec(schema);
            return (0, jsonschema_1.validate)(schema, schemaSpec, { throwError: true }).valid;
        });
    }
    /**
     * Checks if a given [`credentialSubject`](https://www.w3.org/TR/vc-data-model/#credential-subject)
     * object from a Verifiable Credential conforms to the
     * [`credentialSchema`](https://www.w3.org/TR/vc-data-model/#data-schemas) defined
     * in the Verifiable Credential
     *
     * `validate` from jsonschema is used to do the schema validation
     *
     * Verifying the `credentialSubject` structure is a check the Verifier can perform
     * to validate a Verifiable Credential
     *
     *
     * @param credentialSubject the data object to be validated
     * @param schema the `JsonSchema` that the `credentialSubject` should conform to
     * @returns a `Promise` that resolves to if the validation succeeded.
     * Throws jsonschema ValidationError if something goes wrong
     */
    static validateCredentialSubject(credentialSubject, schema) {
        return (0, jsonschema_1.validate)(credentialSubject, schema, { throwError: true }).valid;
    }
}
exports.SchemaManager = SchemaManager;
/**
 * This defines the default type of CredentialSchema used in Verifiable Credentials
 * Currently it is [JsonSchemaValidator2018](https://datatracker.ietf.org/doc/draft-handrews-json-schema/),
 * however the W3C is defining a new spec specifically for Verifiable Credential Schemas called
 * [CredentialSchema2022](https://w3c.github.io/vc-json-schema/)
 */
exports.SCHEMA_VALIDATOR = 'JsonSchemaValidator2018';
