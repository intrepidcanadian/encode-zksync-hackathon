"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyDIDMethod = void 0;
const did_resolver_1 = require("did-resolver");
const crypto_1 = require("crypto");
const utils_1 = require("../../../utils");
const key_did_resolver_1 = require("key-did-resolver");
const ed25519_key_pair_1 = require("@transmute/ed25519-key-pair");
const errors_1 = require("../../../errors");
class KeyDIDMethod {
    constructor() {
        this.name = 'key';
    }
    /**
      * Creates a new EdDSA keypair and corresponding DID following did:key method
      *
      * @returns a `Promise` that resolves to {@link DIDWithKeys}
      */
    create() {
        return __awaiter(this, void 0, void 0, function* () {
            const seed = () => {
                return (0, crypto_1.randomBytes)(32);
            };
            const key = yield ed25519_key_pair_1.Ed25519KeyPair.generate({
                secureRandom: seed
            });
            return {
                did: key.controller,
                keyPair: {
                    algorithm: utils_1.KEY_ALG.EdDSA,
                    publicKey: key.publicKey,
                    privateKey: key.privateKey,
                }
            };
        });
    }
    /**
     * Creates a DID given a private key
     * Used when an EdDSA keypair has already been generated and is going to be used as a DID
     *
     * @param privateKey - private key to be used in creation of a did:key DID
     * @returns a `Promise` that resolves to {@link DIDWithKeys}
     * Throws `DIDMethodFailureError` if supplied private key not in correct format
     */
    generateFromPrivateKey(privateKey) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!utils_1.KeyUtils.isBytesPrivateKey(privateKey)) {
                throw new errors_1.DIDMethodFailureError('private key not in correct byte format');
            }
            const bytes = new Uint8Array(privateKey.subarray(0, 32));
            const key = yield ed25519_key_pair_1.Ed25519KeyPair.generate({ secureRandom: () => bytes });
            return {
                did: key.controller,
                keyPair: {
                    algorithm: utils_1.KEY_ALG.EdDSA,
                    publicKey: key.publicKey,
                    privateKey: key.privateKey,
                }
            };
        });
    }
    /**
     * Resolves a DID using the resolver from key-did-resolver to a {@link DIDResolutionResult}
     * that contains the DIDDocument and associated Metadata
     *
     * Uses key-did-resolver and did-resolver
     *
     * @param did - DID to be resolved to its DIDDocument
     * @returns a `Promise` that resolves to `DIDResolutionResult` defined in did-resolver
     * Throws `DIDMethodFailureError` if resolution failed
     */
    resolve(did) {
        return __awaiter(this, void 0, void 0, function* () {
            const keyDidResolver = new did_resolver_1.Resolver((0, key_did_resolver_1.getResolver)());
            const result = yield keyDidResolver.resolve(did);
            if (result.didResolutionMetadata.error) {
                throw new errors_1.DIDMethodFailureError(`DID Resolution failed for ${did}, ${result.didResolutionMetadata.error}`);
            }
            return result;
        });
    }
    /**
     * did:key does not support update
     */
    update(_did, _publicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new errors_1.DIDMethodFailureError('did:key does not support Update');
        });
    }
    /**
     * did:key does not support deactivate
     */
    deactivate(_did) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new errors_1.DIDMethodFailureError('did:key does not support Delete');
        });
    }
    /**
     * Since did:key cannot be updated or deactivated, the status will always be active
     *
     * @param did - DID to check status of
     * @returns a `Promise` that always resolves to true if DID is in correct format
     * Throws `DIDMethodFailureError` otherwise
     */
    isActive(did) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.checkFormat(did);
        });
    }
    /**
     * Helper function to return the Identifier from a did:key string
     *
     * @param did - DID string
     * @returns the Identifier section of the DID
     * Throws `DIDMethodFailureError` if format check fails
     */
    getIdentifier(did) {
        if (!this.checkFormat(did)) {
            throw new errors_1.DIDMethodFailureError('DID format incorrect');
        }
        return `${did.substring(did.indexOf(':', did.indexOf(':') + 1) + 1)}`;
    }
    /**
     * Helper function to check format of a did:key
     *
     * Correct format is did:key:{alphanumeric identifier of 48 characters}
     *
     * @param did - DID string
     * @returns true if format check passes
     */
    checkFormat(did) {
        const keyMatcher = /(did:key:)([a-zA-Z0-9]{48})$/;
        return keyMatcher.test(did);
    }
    /**
     * Getter method for did:key Resolver from key-did-resolver
     *
     * @returns type that is input to new {@link Resolver} from did-resolver
     */
    getDIDResolver() {
        return (0, key_did_resolver_1.getResolver)();
    }
}
exports.KeyDIDMethod = KeyDIDMethod;
